// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolHeath.Models;

#nullable disable

namespace SchoolHeath.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SchoolHeath.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("AccountId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("SchoolHeath.Models.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("attendance_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendanceId"));

                    b.Property<int>("CampaignId")
                        .HasColumnType("int")
                        .HasColumnName("campaign_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit")
                        .HasColumnName("is_present");

                    b.Property<int>("NurseId")
                        .HasColumnType("int")
                        .HasColumnName("nurse_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.HasKey("AttendanceId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("NurseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("SchoolHeath.Models.HealthCampaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("campaign_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampaignId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("CampaignId");

                    b.ToTable("HealthCampaign");
                });

            modelBuilder.Entity("SchoolHeath.Models.HealthCheckResult", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("result_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultId"));

                    b.Property<string>("BloodPressure")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("blood_pressure");

                    b.Property<string>("Dental")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("dental");

                    b.Property<string>("HeartRate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("heart_rate");

                    b.Property<float>("HeightCm")
                        .HasColumnType("real")
                        .HasColumnName("height_cm");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("notes");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("schedule_id");

                    b.Property<string>("Vision")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("vision");

                    b.Property<float>("WeightKg")
                        .HasColumnType("real")
                        .HasColumnName("weight_kg");

                    b.HasKey("ResultId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("HealthCheckResult");
                });

            modelBuilder.Entity("SchoolHeath.Models.HealthCheckSchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("schedule_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<int>("CampaignId")
                        .HasColumnType("int")
                        .HasColumnName("campaign_id");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("date")
                        .HasColumnName("scheduled_date");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.HasKey("ScheduleId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthCheckSchedule");
                });

            modelBuilder.Entity("SchoolHeath.Models.HealthCheckup", b =>
                {
                    b.Property<int>("CheckupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("checkup_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckupId"));

                    b.Property<string>("BloodPressure")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("blood_pressure");

                    b.Property<DateTime>("CheckupDate")
                        .HasColumnType("date")
                        .HasColumnName("checkup_date");

                    b.Property<double?>("Height")
                        .HasColumnType("float")
                        .HasColumnName("height");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("notes");

                    b.Property<int?>("NurseId")
                        .HasColumnType("int")
                        .HasColumnName("nurse_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<string>("Vision")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("vision");

                    b.Property<double?>("Weight")
                        .HasColumnType("float")
                        .HasColumnName("weight");

                    b.HasKey("CheckupId");

                    b.HasIndex("NurseId");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthCheckup");
                });

            modelBuilder.Entity("SchoolHeath.Models.HealthRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("record_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<string>("Allergies")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("allergies");

                    b.Property<string>("ChronicDiseases")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("chronic_diseases");

                    b.Property<string>("MedicalHistory")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("medical_history");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("VisionStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("vision_status");

                    b.HasKey("RecordId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("HealthRecord");
                });

            modelBuilder.Entity("SchoolHeath.Models.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.HasKey("ManagerId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Manager");
                });

            modelBuilder.Entity("SchoolHeath.Models.MedicalEvent", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("date")
                        .HasColumnName("event_date");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("event_type");

                    b.Property<int?>("HandledBy")
                        .HasColumnType("int")
                        .HasColumnName("handled_by");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("notes");

                    b.Property<string>("Outcome")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("outcome");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<string>("UsedSupplies")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("used_supplies");

                    b.HasKey("EventId");

                    b.HasIndex("HandledBy");

                    b.HasIndex("StudentId");

                    b.ToTable("MedicalEvent");
                });

            modelBuilder.Entity("SchoolHeath.Models.MedicationRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<DateTime?>("ActualAdministerTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("actual_administer_time");

                    b.Property<string>("AdministerLocation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("administer_location");

                    b.Property<DateTime?>("AdministerTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("administer_time");

                    b.Property<int?>("MedicineInventoryMedicineId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("notes");

                    b.Property<int?>("NurseId")
                        .HasColumnType("int")
                        .HasColumnName("nurse_id");

                    b.Property<string>("PrescriptionImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("prescription_image_url");

                    b.Property<int?>("RemainingQuantity")
                        .HasColumnType("int")
                        .HasColumnName("remaining_quantity");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("date")
                        .HasColumnName("request_date");

                    b.Property<int>("RequestedBy")
                        .HasColumnType("int")
                        .HasColumnName("requested_by");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.HasKey("RequestId");

                    b.HasIndex("MedicineInventoryMedicineId");

                    b.HasIndex("NurseId");

                    b.HasIndex("RequestedBy");

                    b.HasIndex("StudentId");

                    b.ToTable("MedicationRequest");
                });

            modelBuilder.Entity("SchoolHeath.Models.MedicationRequestItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Duration")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Frequency")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MedicationRequestId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicationRequestId");

                    b.HasIndex("MedicineId");

                    b.ToTable("MedicationRequestItem");
                });

            modelBuilder.Entity("SchoolHeath.Models.MedicineInventory", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("medicine_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineId"));

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("expiration_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("NurseId")
                        .HasColumnType("int")
                        .HasColumnName("nurse_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("MedicineId");

                    b.HasIndex("NurseId");

                    b.ToTable("MedicineInventory");
                });

            modelBuilder.Entity("SchoolHeath.Models.NurseAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assignment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<int>("NurseId")
                        .HasColumnType("int")
                        .HasColumnName("nurse_id");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("schedule_id");

                    b.HasKey("AssignmentId");

                    b.HasIndex("NurseId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("NurseAssignment");
                });

            modelBuilder.Entity("SchoolHeath.Models.Parent", b =>
                {
                    b.Property<int>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParentId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<string>("Cccd")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("cccd");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.HasKey("ParentId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Parent");
                });

            modelBuilder.Entity("SchoolHeath.Models.SchoolNurse", b =>
                {
                    b.Property<int>("NurseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("nurse_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NurseId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.HasKey("NurseId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("SchoolNurse");
                });

            modelBuilder.Entity("SchoolHeath.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("BloodType")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("blood_type");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("class");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("gender");

                    b.Property<double?>("Height")
                        .HasColumnType("float")
                        .HasColumnName("height");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("ParentCccd")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("parent_cccd");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<string>("School")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("school");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("StudentCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("student_code");

                    b.Property<double?>("Weight")
                        .HasColumnType("float")
                        .HasColumnName("weight");

                    b.HasKey("StudentId");

                    b.HasIndex("ParentId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("SchoolHeath.Models.UserNotification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("message");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int")
                        .HasColumnName("recipient_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.HasKey("NotificationId");

                    b.HasIndex("RecipientId");

                    b.ToTable("UserNotification");
                });

            modelBuilder.Entity("SchoolHeath.Models.VaccinationAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assignment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("date")
                        .HasColumnName("assigned_date");

                    b.Property<int>("CampaignId")
                        .HasColumnType("int")
                        .HasColumnName("campaign_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("notes");

                    b.Property<int>("NurseId")
                        .HasColumnType("int")
                        .HasColumnName("nurse_id");

                    b.HasKey("AssignmentId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("NurseId");

                    b.ToTable("VaccinationAssignment");
                });

            modelBuilder.Entity("SchoolHeath.Models.VaccinationCampaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("campaign_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampaignId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("date")
                        .HasColumnName("schedule_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("TargetClass")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("target_class");

                    b.Property<string>("VaccineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("vaccine_name");

                    b.HasKey("CampaignId");

                    b.ToTable("VaccinationCampaign");
                });

            modelBuilder.Entity("SchoolHeath.Models.VaccinationConsent", b =>
                {
                    b.Property<int>("ConsentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("consent_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsentId"));

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int")
                        .HasColumnName("campaign_id");

                    b.Property<string>("Class")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("class");

                    b.Property<DateTime?>("ConsentDate")
                        .HasColumnType("date")
                        .HasColumnName("consent_date");

                    b.Property<bool?>("ConsentStatus")
                        .HasColumnType("bit")
                        .HasColumnName("consent_status");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("notes");

                    b.Property<string>("ParentCccd")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("parent_cccd");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<string>("VaccineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("vaccine_name");

                    b.HasKey("ConsentId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ParentId");

                    b.HasIndex("StudentId");

                    b.ToTable("VaccinationConsent");
                });

            modelBuilder.Entity("SchoolHeath.Models.VaccinationRecord", b =>
                {
                    b.Property<int>("VaccinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("vaccination_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VaccinationId"));

                    b.Property<int?>("AdministeredBy")
                        .HasColumnType("int")
                        .HasColumnName("administered_by");

                    b.Property<int>("CampaignId")
                        .HasColumnType("int")
                        .HasColumnName("campaign_id");

                    b.Property<DateTime?>("DateOfVaccination")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_of_vaccination");

                    b.Property<DateTime?>("FollowUpReminder")
                        .HasColumnType("datetime2")
                        .HasColumnName("follow_up_reminder");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<string>("VaccineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("vaccine_name");

                    b.HasKey("VaccinationId");

                    b.HasIndex("AdministeredBy");

                    b.HasIndex("CampaignId");

                    b.HasIndex("StudentId");

                    b.ToTable("VaccinationRecord");
                });

            modelBuilder.Entity("SchoolHeath.Models.Attendance", b =>
                {
                    b.HasOne("SchoolHeath.Models.VaccinationCampaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolHeath.Models.SchoolNurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolHeath.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Nurse");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolHeath.Models.HealthCheckResult", b =>
                {
                    b.HasOne("SchoolHeath.Models.HealthCheckSchedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("SchoolHeath.Models.HealthCheckSchedule", b =>
                {
                    b.HasOne("SchoolHeath.Models.HealthCampaign", "Campaign")
                        .WithMany("HealthCheckSchedules")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolHeath.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolHeath.Models.HealthCheckup", b =>
                {
                    b.HasOne("SchoolHeath.Models.SchoolNurse", "Nurse")
                        .WithMany("HealthCheckups")
                        .HasForeignKey("NurseId");

                    b.HasOne("SchoolHeath.Models.Student", "Student")
                        .WithMany("HealthCheckups")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nurse");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolHeath.Models.HealthRecord", b =>
                {
                    b.HasOne("SchoolHeath.Models.Student", "Student")
                        .WithOne("HealthRecord")
                        .HasForeignKey("SchoolHeath.Models.HealthRecord", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolHeath.Models.Manager", b =>
                {
                    b.HasOne("SchoolHeath.Models.Account", "Account")
                        .WithOne("Manager")
                        .HasForeignKey("SchoolHeath.Models.Manager", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SchoolHeath.Models.MedicalEvent", b =>
                {
                    b.HasOne("SchoolHeath.Models.Account", "HandledByNavigation")
                        .WithMany("MedicalEvents")
                        .HasForeignKey("HandledBy");

                    b.HasOne("SchoolHeath.Models.Student", "Student")
                        .WithMany("MedicalEvents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HandledByNavigation");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolHeath.Models.MedicationRequest", b =>
                {
                    b.HasOne("SchoolHeath.Models.MedicineInventory", null)
                        .WithMany("MedicationRequests")
                        .HasForeignKey("MedicineInventoryMedicineId");

                    b.HasOne("SchoolHeath.Models.SchoolNurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.HasOne("SchoolHeath.Models.Account", "RequestedByNavigation")
                        .WithMany("MedicationRequests")
                        .HasForeignKey("RequestedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolHeath.Models.Student", "Student")
                        .WithMany("MedicationRequests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nurse");

                    b.Navigation("RequestedByNavigation");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolHeath.Models.MedicationRequestItem", b =>
                {
                    b.HasOne("SchoolHeath.Models.MedicationRequest", "MedicationRequest")
                        .WithMany("Medicines")
                        .HasForeignKey("MedicationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolHeath.Models.MedicineInventory", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicationRequest");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("SchoolHeath.Models.MedicineInventory", b =>
                {
                    b.HasOne("SchoolHeath.Models.SchoolNurse", "Nurse")
                        .WithMany("MedicineInventories")
                        .HasForeignKey("NurseId");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("SchoolHeath.Models.NurseAssignment", b =>
                {
                    b.HasOne("SchoolHeath.Models.Account", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolHeath.Models.HealthCheckSchedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nurse");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("SchoolHeath.Models.Parent", b =>
                {
                    b.HasOne("SchoolHeath.Models.Account", "Account")
                        .WithOne("Parent")
                        .HasForeignKey("SchoolHeath.Models.Parent", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SchoolHeath.Models.SchoolNurse", b =>
                {
                    b.HasOne("SchoolHeath.Models.Account", "Account")
                        .WithOne("SchoolNurse")
                        .HasForeignKey("SchoolHeath.Models.SchoolNurse", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SchoolHeath.Models.Student", b =>
                {
                    b.HasOne("SchoolHeath.Models.Parent", "Parent")
                        .WithMany("Students")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SchoolHeath.Models.UserNotification", b =>
                {
                    b.HasOne("SchoolHeath.Models.Account", "Recipient")
                        .WithMany("UserNotifications")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("SchoolHeath.Models.VaccinationAssignment", b =>
                {
                    b.HasOne("SchoolHeath.Models.VaccinationCampaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolHeath.Models.SchoolNurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("SchoolHeath.Models.VaccinationConsent", b =>
                {
                    b.HasOne("SchoolHeath.Models.VaccinationCampaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId");

                    b.HasOne("SchoolHeath.Models.Parent", "Parent")
                        .WithMany("VaccinationConsents")
                        .HasForeignKey("ParentId");

                    b.HasOne("SchoolHeath.Models.Student", "Student")
                        .WithMany("VaccinationConsents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolHeath.Models.VaccinationRecord", b =>
                {
                    b.HasOne("SchoolHeath.Models.SchoolNurse", "AdministeredByNavigation")
                        .WithMany("VaccinationRecords")
                        .HasForeignKey("AdministeredBy");

                    b.HasOne("SchoolHeath.Models.VaccinationCampaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolHeath.Models.Student", "Student")
                        .WithMany("VaccinationRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdministeredByNavigation");

                    b.Navigation("Campaign");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolHeath.Models.Account", b =>
                {
                    b.Navigation("Manager");

                    b.Navigation("MedicalEvents");

                    b.Navigation("MedicationRequests");

                    b.Navigation("Parent");

                    b.Navigation("SchoolNurse");

                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("SchoolHeath.Models.HealthCampaign", b =>
                {
                    b.Navigation("HealthCheckSchedules");
                });

            modelBuilder.Entity("SchoolHeath.Models.MedicationRequest", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("SchoolHeath.Models.MedicineInventory", b =>
                {
                    b.Navigation("MedicationRequests");
                });

            modelBuilder.Entity("SchoolHeath.Models.Parent", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("VaccinationConsents");
                });

            modelBuilder.Entity("SchoolHeath.Models.SchoolNurse", b =>
                {
                    b.Navigation("HealthCheckups");

                    b.Navigation("MedicineInventories");

                    b.Navigation("VaccinationRecords");
                });

            modelBuilder.Entity("SchoolHeath.Models.Student", b =>
                {
                    b.Navigation("HealthCheckups");

                    b.Navigation("HealthRecord");

                    b.Navigation("MedicalEvents");

                    b.Navigation("MedicationRequests");

                    b.Navigation("VaccinationConsents");

                    b.Navigation("VaccinationRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
